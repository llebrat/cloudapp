---
name: static-website
'on':
  pull_request:
  push:
    branches:
      - main
  schedule:
    - cron: "0 2 * * *"
env:
  ID_DOCKER: "llebrat"
  IMAGE_NAME: "cloudapp"
  IMAGE_TAG: "v1"
  APP_CONTAINER_PORT: "80"
  APP_EXPOSED_PORT: "80"


#defaults:
#  run:
#    working-directory: 'workdir-staticwebsite'

jobs:
  build:
    name: BUILD DOCKER IMAGE
    runs-on: ubuntu-latest
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v2
#        with:
#          path: 'workdir-cloudapp'
      - name: Build Image
        run: | 
          docker build -t ${ID_DOCKER}/$IMAGE_NAME:$IMAGE_TAG .
          docker save ${ID_DOCKER}/$IMAGE_NAME:$IMAGE_TAG > $IMAGE_NAME
          echo "IMAGE_NAME=cloudapp" >> $GITHUB_ENV
      - name: Upload workspace from job build
        uses: actions/upload-artifact@v3
        with:
          name: image
          path: ${{ env.IMAGE_NAME }}
          retention-days: 2

  run-and-test:
    name: RUN AND TEST CONTAINER
    needs: build
    runs-on: ubuntu-latest
    steps:  
      - name: Download workspace from job build
        uses: actions/download-artifact@v3
        with:
          name: image
      - name: Run container based on builded image
        run: |
          docker load < $IMAGE_NAME
          docker run --name $IMAGE_NAME -d -p ${APP_EXPOSED_PORT}:${APP_CONTAINER_PORT} -e PORT=$APP_CONTAINER_PORT ${ID_DOCKER}/$IMAGE_NAME:$IMAGE_TAG
          sleep 5
      - name: Test image.
        run: curl http://172.17.0.1:${APP_EXPOSED_PORT} | grep -i "Dimension"

      - name: Clean Container
        run: |
          docker stop $IMAGE_NAME
          docker rm $IMAGE_NAME
  push:
    name: PUSH IMAGE ON DOCKERHUB
    needs: run-and-test
    runs-on: ubuntu-latest
    steps:    
      - name: Download workspace from job build
        uses: actions/download-artifact@v3
        with:
          name: image    
      - name: Login and Push Image on docker hub
        run: |
          docker load < $IMAGE_NAME
          echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u $ID_DOCKER --password-stdin
          docker push ${ID_DOCKER}/$IMAGE_NAME:$IMAGE_TAG 
